import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardActions,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Grid,
  Typography,
  IconButton,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  FormControlLabel,
  Switch,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  InputAdornment,
  Divider,
  Tooltip,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  AttachMoney as MoneyIcon,
  CheckCircle as CheckIcon,
  Cancel as CancelIcon,
  Info as InfoIcon,
  ContentCopy as CopyIcon
} from '@mui/icons-material';
import api from '../../services/api';
import { useAuth } from '../../contexts/AuthContext';
import { UserRole } from '../../shared/types';

interface FeeComponent {
  id?: string;
  name: string;
  amount: number;
  isRefundable: boolean;
  refundableAfterArrival: boolean;
  description?: string;
}

interface FeeTemplate {
  id: string;
  name: string;
  defaultPrice: number;
  minPrice: number;
  maxPrice: number;
  nationality?: string;
  serviceType?: string;
  description?: string;
  feeComponents: FeeComponent[];
}

const FeeTemplateSettings: React.FC = () => {
  const { user } = useAuth();
  const [templates, setTemplates] = useState<FeeTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<FeeTemplate | null>(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    defaultPrice: 0,
    minPrice: 0,
    maxPrice: 0,
    nationality: '',
    serviceType: '',
    description: '',
    components: [] as FeeComponent[]
  });

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      setLoading(true);
      const response = await api.get('/fee-components');
      setTemplates(response.data || []);
    } catch (error) {
      console.error('Failed to fetch templates:', error);
      setError('Failed to load fee templates');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDialog = (template?: FeeTemplate) => {
    if (template) {
      setSelectedTemplate(template);
      setFormData({
        name: template.name,
        defaultPrice: Number(template.defaultPrice),
        minPrice: Number(template.minPrice),
        maxPrice: Number(template.maxPrice),
        nationality: template.nationality || '',
        serviceType: template.serviceType || '',
        description: template.description || '',
        components: template.feeComponents || []
      });
    } else {
      setSelectedTemplate(null);
      setFormData({
        name: '',
        defaultPrice: 0,
        minPrice: 0,
        maxPrice: 0,
        nationality: '',
        serviceType: '',
        description: '',
        components: []
      });
    }
    setDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setSelectedTemplate(null);
  };

  const handleAddComponent = () => {
    setFormData({
      ...formData,
      components: [
        ...formData.components,
        {
          name: '',
          amount: 0,
          isRefundable: true,
          refundableAfterArrival: false,
          description: ''
        }
      ]
    });
  };

  const handleUpdateComponent = (index: number, field: keyof FeeComponent, value: any) => {
    const updatedComponents = [...formData.components];
    updatedComponents[index] = {
      ...updatedComponents[index],
      [field]: value
    };
    setFormData({ ...formData, components: updatedComponents });
  };

  const handleRemoveComponent = (index: number) => {
    const updatedComponents = formData.components.filter((_, i) => i !== index);
    setFormData({ ...formData, components: updatedComponents });
  };

  const calculateTotalFromComponents = () => {
    return formData.components.reduce((sum, component) => sum + Number(component.amount), 0);
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      
      if (selectedTemplate) {
        // Update existing template
        await api.put(`/fee-components/${selectedTemplate.id}`, formData);
        setSuccess('Template updated successfully');
      } else {
        // Create new template
        await api.post('/fee-components', formData);
        setSuccess('Template created successfully');
      }
      
      handleCloseDialog();
      fetchTemplates();
    } catch (error: any) {
      console.error('Failed to save template:', error);
      setError(error.response?.data?.error || 'Failed to save template');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!selectedTemplate) return;
    
    try {
      setLoading(true);
      await api.delete(`/fee-components/${selectedTemplate.id}`);
      setSuccess('Template deleted successfully');
      setDeleteDialogOpen(false);
      setSelectedTemplate(null);
      fetchTemplates();
    } catch (error: any) {
      console.error('Failed to delete template:', error);
      setError(error.response?.data?.error || 'Failed to delete template');
    } finally {
      setLoading(false);
    }
  };

  const handleDuplicate = (template: FeeTemplate) => {
    setFormData({
      name: `${template.name} (Copy)`,
      defaultPrice: Number(template.defaultPrice),
      minPrice: Number(template.minPrice),
      maxPrice: Number(template.maxPrice),
      nationality: template.nationality || '',
      serviceType: template.serviceType || '',
      description: template.description || '',
      components: template.feeComponents.map(c => ({ ...c, id: undefined }))
    });
    setSelectedTemplate(null);
    setDialogOpen(true);
  };

  const handleInitializeDefaults = async () => {
    try {
      setLoading(true);
      await api.post('/fee-components/initialize-defaults');
      setSuccess('Default templates and cancellation settings created successfully');
      fetchTemplates();
    } catch (error: any) {
      console.error('Failed to initialize defaults:', error);
      setError(error.response?.data?.error || 'Failed to initialize defaults');
    } finally {
      setLoading(false);
    }
  };

  const isSuperAdmin = user?.role === UserRole.SUPER_ADMIN;

  if (!isSuperAdmin) {
    return (
      <Alert severity="error">
        You don't have permission to access this page.
      </Alert>
    );
  }

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h5" fontWeight="bold">
          Fee Templates & Components
        </Typography>
        <Box>
          {templates.length === 0 && (
            <Button
              variant="outlined"
              startIcon={<InfoIcon />}
              onClick={handleInitializeDefaults}
              sx={{ mr: 2 }}
            >
              Initialize Defaults
            </Button>
          )}
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => handleOpenDialog()}
          >
            New Template
          </Button>
        </Box>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>{success}</Alert>}

      <Grid container spacing={3}>
        {templates.map((template) => (
          <Grid item xs={12} md={6} lg={4} key={template.id}>
            <Card>
              <CardContent>
                <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
                  <Box>
                    <Typography variant="h6" fontWeight="bold">
                      {template.name}
                    </Typography>
                    {template.nationality && (
                      <Chip label={template.nationality} size="small" sx={{ mt: 1 }} />
                    )}
                    {template.serviceType && (
                      <Chip label={template.serviceType} size="small" sx={{ mt: 1, ml: 1 }} />
                    )}
                  </Box>
                  <Typography variant="h5" color="primary">
                    ${template.defaultPrice}
                  </Typography>
                </Box>
                
                {template.description && (
                  <Typography variant="body2" color="text.secondary" mb={2}>
                    {template.description}
                  </Typography>
                )}

                <Divider sx={{ my: 2 }} />

                <Typography variant="subtitle2" fontWeight="bold" mb={1}>
                  Components ({template.feeComponents?.length || 0})
                </Typography>
                
                <List dense>
                  {template.feeComponents?.slice(0, 3).map((component, index) => (
                    <ListItem key={index} disableGutters>
                      <ListItemText
                        primary={component.name}
                        secondary={
                          <Box display="flex" alignItems="center" gap={1}>
                            <Typography variant="caption">${component.amount}</Typography>
                            {component.isRefundable ? (
                              <Chip label="Refundable" size="small" color="success" sx={{ height: 16 }} />
                            ) : (
                              <Chip label="Non-refundable" size="small" color="error" sx={{ height: 16 }} />
                            )}
                          </Box>
                        }
                      />
                    </ListItem>
                  ))}
                  {template.feeComponents?.length > 3 && (
                    <Typography variant="caption" color="text.secondary">
                      +{template.feeComponents.length - 3} more components
                    </Typography>
                  )}
                </List>
              </CardContent>
              <CardActions>
                <Button size="small" onClick={() => handleOpenDialog(template)}>
                  Edit
                </Button>
                <Button size="small" onClick={() => handleDuplicate(template)}>
                  Duplicate
                </Button>
                <Button 
                  size="small" 
                  color="error"
                  onClick={() => {
                    setSelectedTemplate(template);
                    setDeleteDialogOpen(true);
                  }}
                >
                  Delete
                </Button>
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Create/Edit Dialog */}
      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>
          {selectedTemplate ? 'Edit Fee Template' : 'Create Fee Template'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Template Name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                required
              />
            </Grid>
            
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Default Price"
                type="number"
                value={formData.defaultPrice}
                onChange={(e) => setFormData({ ...formData, defaultPrice: Number(e.target.value) })}
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>
                }}
                required
              />
            </Grid>
            
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Min Price"
                type="number"
                value={formData.minPrice}
                onChange={(e) => setFormData({ ...formData, minPrice: Number(e.target.value) })}
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>
                }}
                required
              />
            </Grid>
            
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Max Price"
                type="number"
                value={formData.maxPrice}
                onChange={(e) => setFormData({ ...formData, maxPrice: Number(e.target.value) })}
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>
                }}
                required
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Nationality (Optional)"
                value={formData.nationality}
                onChange={(e) => setFormData({ ...formData, nationality: e.target.value })}
                placeholder="e.g., Philippines"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Service Type (Optional)</InputLabel>
                <Select
                  value={formData.serviceType}
                  onChange={(e) => setFormData({ ...formData, serviceType: e.target.value })}
                  label="Service Type (Optional)"
                >
                  <MenuItem value="">None</MenuItem>
                  <MenuItem value="NEW_CANDIDATE">New Candidate</MenuItem>
                  <MenuItem value="GUARANTOR_CHANGE">Guarantor Change</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description (Optional)"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                multiline
                rows={2}
              />
            </Grid>
            
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
            </Grid>
            
            <Grid item xs={12}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  Fee Components
                </Typography>
                <Box>
                  <Typography variant="body2" color="text.secondary" sx={{ mr: 2, display: 'inline' }}>
                    Total: ${calculateTotalFromComponents()}
                  </Typography>
                  <Button
                    size="small"
                    variant="outlined"
                    startIcon={<AddIcon />}
                    onClick={handleAddComponent}
                  >
                    Add Component
                  </Button>
                </Box>
              </Box>
              
              {formData.components.length === 0 ? (
                <Alert severity="info">
                  No components added. Click "Add Component" to break down the fee structure.
                </Alert>
              ) : (
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Component Name</TableCell>
                        <TableCell align="right">Amount</TableCell>
                        <TableCell align="center">Refundable</TableCell>
                        <TableCell align="center">Refundable After Arrival</TableCell>
                        <TableCell align="center">Actions</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formData.components.map((component, index) => (
                        <TableRow key={index}>
                          <TableCell>
                            <TextField
                              size="small"
                              value={component.name}
                              onChange={(e) => handleUpdateComponent(index, 'name', e.target.value)}
                              placeholder="e.g., Office Service"
                              fullWidth
                            />
                          </TableCell>
                          <TableCell align="right">
                            <TextField
                              size="small"
                              type="number"
                              value={component.amount}
                              onChange={(e) => handleUpdateComponent(index, 'amount', Number(e.target.value))}
                              InputProps={{
                                startAdornment: <InputAdornment position="start">$</InputAdornment>
                              }}
                              sx={{ width: 120 }}
                            />
                          </TableCell>
                          <TableCell align="center">
                            <Switch
                              checked={component.isRefundable}
                              onChange={(e) => handleUpdateComponent(index, 'isRefundable', e.target.checked)}
                              color="primary"
                            />
                          </TableCell>
                          <TableCell align="center">
                            <Switch
                              checked={component.refundableAfterArrival}
                              onChange={(e) => handleUpdateComponent(index, 'refundableAfterArrival', e.target.checked)}
                              color="primary"
                              disabled={!component.isRefundable}
                            />
                          </TableCell>
                          <TableCell align="center">
                            <IconButton
                              size="small"
                              onClick={() => handleRemoveComponent(index)}
                              color="error"
                            >
                              <DeleteIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              )}
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button 
            onClick={handleSave} 
            variant="contained" 
            disabled={loading || !formData.name || formData.defaultPrice <= 0}
          >
            {selectedTemplate ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
        <DialogTitle>Delete Fee Template</DialogTitle>
        <DialogContent>
          <Typography>
            Are you sure you want to delete the template "{selectedTemplate?.name}"? 
            This action cannot be undone.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleDelete} color="error" variant="contained" disabled={loading}>
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default FeeTemplateSettings;
