// datasource db defines the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client defines the Prisma Client settings
generator client {
  provider = "prisma-client-js"
}

// ENUMS for roles, statuses, etc.
enum UserRole {
  super_admin
  admin
}

enum CandidateStatus {
  Available_Abroad
  Available_In_Lebanon
  Reserved
  In_Process
  Placed
}

enum ApplicationType {
  New_Candidate
  Guarantor_Change
}

enum DocumentStatus {
  pending
  received
  submitted
}

// MODELS based on Section 6 of the specification document

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  passwordHash  String
  role          UserRole @default(admin)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Client {
  id                  String        @id @default(cuid())
  name                String
  phone               String
  address             String?
  notes               String?
  applications        Application[]
  referredByClientId  String?
  referredBy          Client?       @relation("ClientReferrals", fields: [referredByClientId], references: [id])
  referrals           Client[]      @relation("ClientReferrals")
  createdAt           DateTime      @default(now())
}

model Candidate {
  id                  String        @id @default(cuid())
  firstName           String
  lastName            String
  photoUrl            String?
  dob                 DateTime
  nationality         String
  education           String?
  skills              Json?
  experienceSummary   String?
  status              CandidateStatus @default(Available_Abroad)
  agentId             String?
  agent               Agent?        @relation(fields: [agentId], references: [id])
  applications        Application[]
  createdAt           DateTime      @default(now())
}

model Application {
  id                  String                @id @default(cuid())
  type                ApplicationType
  status              String // Will be a specific workflow status string, e.g., "Pending_MoL"
  permitExpiryDate    DateTime?
  
  clientId            String
  client              Client                @relation(fields: [clientId], references: [id])
  
  candidateId         String
  candidate           Candidate             @relation(fields: [candidateId], references: [id])

  brokerId            String?
  broker              Broker?               @relation(fields: [brokerId], references: [id])

  payments            Payment[]
  costs               Cost[]
  documentChecklist   DocumentChecklistItem[]
  
  // Unique shareable link token
  clientAccessLink    String                @unique @default(cuid())

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Payment {
  id              String      @id @default(cuid())
  amount          Float
  currency        String      @default("USD")
  paymentDate     DateTime
  notes           String?
  applicationId   String
  application     Application @relation(fields: [applicationId], references: [id])
}

model Cost {
  id            String      @id @default(cuid())
  amount        Float
  currency      String      @default("USD")
  costDate      DateTime
  costType      String      // e.g., "agent_fee", "broker_fee", "gov_fee", "ticket"
  description   String?
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
}

model DocumentChecklistItem {
  id            String          @id @default(cuid())
  documentName  String
  status        DocumentStatus  @default(pending)
  applicationId String
  application   Application     @relation(fields: [applicationId], references: [id])
}

model Agent {
  id              String      @id @default(cuid())
  name            String
  contactDetails  String?
  candidates      Candidate[]
}

model Broker {
  id              String        @id @default(cuid())
  name            String
  contactDetails  String?
  applications    Application[]
}
