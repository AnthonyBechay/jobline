// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Company model - each Super Admin creates a company/office
model Company {
  id                    String    @id @default(uuid())
  name                  String
  phone                 String?
  address               String?
  email                 String?
  website               String?
  taxId                 String?   @map("tax_id")
  molRegistrationNumber String?   @map("mol_registration_number")
  bankName              String?   @map("bank_name")
  bankAccountNumber     String?   @map("bank_account_number")
  bankIBAN              String?   @map("bank_iban")
  bankSwiftCode         String?   @map("bank_swift_code")
  licenseNumber         String?   @map("license_number")
  establishedDate       DateTime? @map("established_date")
  numberOfEmployees     Int?      @map("number_of_employees")
  contactPersonName     String?   @map("contact_person_name")
  contactPersonPhone    String?   @map("contact_person_phone")
  contactPersonEmail    String?   @map("contact_person_email")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Relations
  users         User[]
  agents        Agent[]
  brokers       Broker[]
  candidates    Candidate[]
  clients       Client[]
  applications  Application[]
  settings      Setting[]
  templates     DocumentTemplate[]
  feeTemplates  FeeTemplate[]
  files         File[]
  nationalities Nationality[]
  serviceTypes  ServiceType[]
  costTypes     CostTypeModel[]
  guarantorChanges GuarantorChange[]
  lifecycleHistory ApplicationLifecycleHistory[]
  overheadCosts OfficeOverheadCost[]
  cancellationSettings CancellationSetting[]
  lawyerServiceSettings LawyerServiceSetting[]

  @@map("companies")
}

// User model for authentication and role management
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  companyId    String   @map("company_id")
  company      Company  @relation(fields: [companyId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  uploadedFiles File[]
  lifecycleHistory ApplicationLifecycleHistory[]
  overheadCosts OfficeOverheadCost[]

  @@index([companyId])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

// Agent model for sourcing agents
model Agent {
  id             String      @id @default(uuid())
  name           String
  contactDetails Json        @map("contact_details")
  companyId      String      @map("company_id")
  company        Company     @relation(fields: [companyId], references: [id])
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  candidates     Candidate[]

  @@index([companyId])
  @@map("agents")
}

// Broker model for arrival brokers
model Broker {
  id             String        @id @default(uuid())
  name           String
  contactDetails Json          @map("contact_details")
  companyId      String        @map("company_id")
  company        Company       @relation(fields: [companyId], references: [id])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  applications   Application[]

  @@index([companyId])
  @@map("brokers")
}

// Candidate model
model Candidate {
  id                String           @id @default(uuid())
  firstName         String           @map("first_name")
  lastName          String           @map("last_name")
  photoUrl          String?          @map("photo_url")
  facePhotoUrl      String?          @map("face_photo_url")
  fullBodyPhotoUrl  String?          @map("full_body_photo_url")
  dateOfBirth       DateTime?        @map("date_of_birth")
  nationality       String
  education         String?
  skills            Json?
  experienceSummary String?          @map("experience_summary")
  height            String?          @map("height")
  weight            String?          @map("weight")
  status            CandidateStatus
  agentId           String?          @map("agent_id")
  agent             Agent?           @relation(fields: [agentId], references: [id])
  companyId         String           @map("company_id")
  company           Company          @relation(fields: [companyId], references: [id])
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  applications      Application[]
  guarantorChanges  GuarantorChange[]

  @@index([status])
  @@index([nationality])
  @@index([companyId])
  @@map("candidates")
}

enum CandidateStatus {
  AVAILABLE_ABROAD
  AVAILABLE_IN_LEBANON
  RESERVED
  IN_PROCESS
  PLACED
}

// Client model
model Client {
  id               String            @id @default(uuid())
  name             String
  phone            String
  address          String?
  notes            String?
  referredByClient String?           @map("referred_by_client_id")
  referrer         Client?           @relation("ClientReferrals", fields: [referredByClient], references: [id])
  referrals        Client[]          @relation("ClientReferrals")
  companyId        String            @map("company_id")
  company          Company           @relation(fields: [companyId], references: [id])
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  applications     Application[]
  guarantorChangeApplications Application[] @relation("GuarantorChange")
  payments         Payment[]
  documents        ClientDocument[]
  fromGuarantorChanges GuarantorChange[] @relation("FromClient")
  toGuarantorChanges GuarantorChange[] @relation("ToClient")

  @@index([companyId])
  @@map("clients")
}

// Application model - central entity linking Client, Candidate, and Process
model Application {
  id                     String                  @id @default(uuid())
  clientId               String                  @map("client_id")
  client                 Client                  @relation(fields: [clientId], references: [id])
  fromClientId           String?                 @map("from_client_id")
  fromClient             Client?                 @relation("GuarantorChange", fields: [fromClientId], references: [id])
  candidateId            String                  @map("candidate_id")
  candidate              Candidate               @relation(fields: [candidateId], references: [id])
  status                 ApplicationStatus
  type                   ApplicationType
  brokerId               String?                 @map("broker_id")
  broker                 Broker?                 @relation(fields: [brokerId], references: [id])
  permitExpiryDate       DateTime?               @map("permit_expiry_date")
  exactArrivalDate       DateTime?               @map("exact_arrival_date")
  shareableLink          String                  @unique @map("shareable_link")
  feeTemplateId          String?                 @map("fee_template_id")
  feeTemplate            FeeTemplate?            @relation(fields: [feeTemplateId], references: [id])
  finalFeeAmount         Decimal?                @map("final_fee_amount") @db.Decimal(10, 2)
  lawyerServiceRequested Boolean                 @default(false) @map("lawyer_service_requested")
  lawyerFeeCost          Decimal?                @map("lawyer_fee_cost") @db.Decimal(10, 2)
  lawyerFeeCharge        Decimal?                @map("lawyer_fee_charge") @db.Decimal(10, 2)
  companyId              String                  @map("company_id")
  company                Company                 @relation(fields: [companyId], references: [id])
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  payments               Payment[]
  costs                  Cost[]
  documentItems          DocumentChecklistItem[]
  originalGuarantorChanges GuarantorChange[] @relation("OriginalApplication")
  newGuarantorChanges    GuarantorChange[] @relation("NewApplication")
  lifecycleHistory       ApplicationLifecycleHistory[]

  @@index([status])
  @@index([clientId])
  @@index([fromClientId])
  @@index([candidateId])
  @@index([companyId])
  @@map("applications")
}

enum ApplicationStatus {
  PENDING_MOL
  MOL_AUTH_RECEIVED
  VISA_PROCESSING
  VISA_RECEIVED
  WORKER_ARRIVED
  LABOUR_PERMIT_PROCESSING
  RESIDENCY_PERMIT_PROCESSING
  ACTIVE_EMPLOYMENT
  CONTRACT_ENDED
  RENEWAL_PENDING
  CANCELLED_PRE_ARRIVAL
  CANCELLED_POST_ARRIVAL
  CANCELLED_CANDIDATE
}

enum ApplicationType {
  NEW_CANDIDATE
  GUARANTOR_CHANGE
}

// Payment model for tracking revenue
model Payment {
  id            String      @id @default(uuid())
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id])
  clientId      String      @map("client_id")
  client        Client      @relation(fields: [clientId], references: [id])
  amount        Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  paymentDate   DateTime    @default(now()) @map("payment_date")
  paymentType   String      @default("FEE") @map("payment_type") // FEE, REFUND, PARTIAL_REFUND, etc.
  notes         String?
  isRefundable  Boolean     @default(true) @map("is_refundable")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@index([applicationId])
  @@index([clientId])
  @@map("payments")
}

// Cost model for tracking expenses (Super Admin only)
model Cost {
  id            String      @id @default(uuid())
  applicationId String      @map("application_id")
  application   Application @relation(fields: [applicationId], references: [id])
  amount        Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  costDate      DateTime    @default(now()) @map("cost_date")
  costType      String      @default("OTHER") @map("cost_type") // Changed from enum to string
  description   String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@index([applicationId])
  @@map("costs")
}



// DocumentChecklistItem model for tracking document status
model DocumentChecklistItem {
  id            String           @id @default(uuid())
  applicationId String           @map("application_id")
  application   Application      @relation(fields: [applicationId], references: [id])
  documentName  String           @map("document_name")
  status        DocumentStatus
  stage         ApplicationStatus
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  @@index([applicationId])
  @@map("document_checklist_items")
}

enum DocumentStatus {
  PENDING
  RECEIVED
  SUBMITTED
}

// Settings model for system configuration (Super Admin only)
model Setting {
  id          String   @id @default(uuid())
  key         String   
  value       Json
  description String?
  companyId   String   @map("company_id")
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([companyId, key])
  @@index([companyId])
  @@map("settings")
}

// DocumentTemplate model for managing required documents per stage
model DocumentTemplate {
  id           String            @id @default(uuid())
  stage        ApplicationStatus
  name         String
  description  String?           // Description/instructions for the document
  required     Boolean           @default(true)
  requiredFrom String            @default("office") // "office" or "client"  
  order        Int               @default(0)
  companyId    String            @map("company_id")
  company      Company           @relation(fields: [companyId], references: [id])
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@unique([companyId, stage, name])
  @@index([companyId])
  @@map("document_templates")
}

// FeeTemplate model for managing customizable fee structures
model FeeTemplate {
  id           String        @id @default(uuid())
  name         String
  defaultPrice Decimal       @map("default_price") @db.Decimal(10, 2)
  minPrice     Decimal       @map("min_price") @db.Decimal(10, 2)
  maxPrice     Decimal       @map("max_price") @db.Decimal(10, 2)
  currency     String        @default("USD")
  nationality  String?       // Optional nationality for nationality-specific fees
  serviceType  String?       @map("service_type") // New field for service type
  description  String?
  companyId    String        @map("company_id")
  company      Company       @relation(fields: [companyId], references: [id])
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  applications Application[]

  @@unique([companyId, name])
  @@index([companyId])
  @@index([nationality])
  @@map("fee_templates")
}

// File model for managing uploaded files
model File {
  id            String   @id @default(uuid())
  entityType    String   @map("entity_type") // 'application', 'client', 'candidate'
  entityId      String   @map("entity_id")
  fileName      String   @map("file_name")
  originalName  String   @map("original_name")
  mimeType      String   @map("mime_type")
  size          BigInt
  url           String
  cloudinaryId  String?  @map("cloudinary_id") // For Cloudinary public ID
  uploadedBy    String   @map("uploaded_by")
  uploader      User     @relation(fields: [uploadedBy], references: [id])
  companyId     String   @map("company_id")
  company       Company  @relation(fields: [companyId], references: [id])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([entityType, entityId])
  @@index([companyId])
  @@map("files")
}

// ClientDocument model for client-specific documents
model ClientDocument {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id")
  client       Client   @relation(fields: [clientId], references: [id])
  documentName String   @map("document_name")
  fileName     String   @map("file_name")
  url          String
  mimeType     String   @map("mime_type")
  size         BigInt
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([clientId])
  @@map("client_documents")
}

// Nationality model for managing nationalities
model Nationality {
  id        String   @id @default(uuid())
  code      String
  name      String
  active    Boolean  @default(true)
  companyId String   @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([companyId, code])
  @@index([companyId])
  @@map("nationalities")
}

// ServiceType model for managing service types
model ServiceType {
  id          String   @id @default(uuid())
  name        String
  description String?
  active      Boolean  @default(true)
  companyId   String   @map("company_id")
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([companyId, name])
  @@index([companyId])
  @@map("service_types")
}

// CostTypeModel for managing cost types
model CostTypeModel {
  id          String   @id @default(uuid())
  name        String
  description String?
  active      Boolean  @default(true)
  companyId   String   @map("company_id")
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([companyId, name])
  @@index([companyId])
  @@map("cost_types")
}

// GuarantorChange model for tracking guarantor changes
model GuarantorChange {
  id                    String      @id @default(uuid())
  originalApplicationId String      @map("original_application_id")
  originalApplication   Application @relation("OriginalApplication", fields: [originalApplicationId], references: [id])
  newApplicationId      String?     @map("new_application_id")
  newApplication        Application? @relation("NewApplication", fields: [newApplicationId], references: [id])
  fromClientId          String      @map("from_client_id")
  fromClient            Client      @relation("FromClient", fields: [fromClientId], references: [id])
  toClientId            String      @map("to_client_id")
  toClient              Client      @relation("ToClient", fields: [toClientId], references: [id])
  candidateId           String      @map("candidate_id")
  candidate             Candidate   @relation(fields: [candidateId], references: [id])
  changeDate            DateTime    @default(now()) @map("change_date")
  reason                String?     // Reason for the change
  refundAmount          Decimal?    @db.Decimal(10, 2) @map("refund_amount")
  refundCurrency        String      @default("USD") @map("refund_currency")
  refundProcessed       Boolean     @default(false) @map("refund_processed")
  refundProcessedDate   DateTime?   @map("refund_processed_date")
  candidateStatusBefore String      @map("candidate_status_before")
  candidateStatusAfter  String      @map("candidate_status_after")
  notes                 String?
  companyId             String      @map("company_id")
  company               Company     @relation(fields: [companyId], references: [id])
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")

  @@index([originalApplicationId])
  @@index([newApplicationId])
  @@index([fromClientId])
  @@index([toClientId])
  @@index([candidateId])
  @@index([companyId])
  @@map("guarantor_changes")
}

// Application Lifecycle History model for tracking all application changes
model ApplicationLifecycleHistory {
  id                    String      @id @default(uuid())
  applicationId         String      @map("application_id")
  application           Application @relation(fields: [applicationId], references: [id])
  action                String      // 'status_change', 'cancellation', 'guarantor_change', 'payment_added', etc.
  fromStatus            String?     @map("from_status")
  toStatus              String?     @map("to_status")
  fromClientId          String?     @map("from_client_id")
  toClientId            String?     @map("to_client_id")
  candidateStatusBefore String?     @map("candidate_status_before")
  candidateStatusAfter  String?     @map("candidate_status_after")
  financialImpact       Json?       @map("financial_impact") // Store refund amounts, costs, etc.
  notes                 String?
  performedBy           String      @map("performed_by")
  performer             User        @relation(fields: [performedBy], references: [id])
  performedAt           DateTime    @default(now()) @map("performed_at")
  companyId             String      @map("company_id")
  company               Company     @relation(fields: [companyId], references: [id])

  @@index([applicationId])
  @@index([companyId])
  @@index([performedBy])
  @@map("application_lifecycle_history")
}

// Office Overhead Costs model for general business expenses
model OfficeOverheadCost {
  id                  String   @id @default(uuid())
  name                String
  description         String?
  amount              Decimal  @db.Decimal(10, 2)
  currency            String   @default("USD")
  costDate            DateTime @default(now()) @map("cost_date")
  category            String   // 'rent', 'utilities', 'salaries', 'equipment', 'marketing', etc.
  recurring           Boolean  @default(false)
  recurringFrequency  String?  @map("recurring_frequency") // 'monthly', 'quarterly', 'yearly'
  companyId           String   @map("company_id")
  company             Company  @relation(fields: [companyId], references: [id])
  createdBy           String   @map("created_by")
  creator             User     @relation(fields: [createdBy], references: [id])
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@index([companyId])
  @@index([category])
  @@index([costDate])
  @@map("office_overhead_costs")
}

// Cancellation Settings model for configurable cancellation policies
model CancellationSetting {
  id                  String   @id @default(uuid())
  cancellationType    String   @map("cancellation_type") // 'pre_arrival', 'post_arrival_within_3_months', 'post_arrival_after_3_months', 'candidate_cancellation'
  penaltyFee          Decimal  @default(0) @map("penalty_fee") @db.Decimal(10, 2)
  refundPercentage    Decimal  @default(100) @map("refund_percentage") @db.Decimal(5, 2) // 0-100
  nonRefundableFees   Json?    @map("non_refundable_fees") // Array of fee types that are non-refundable
  monthlyServiceFee   Decimal  @default(0) @map("monthly_service_fee") @db.Decimal(10, 2)
  maxRefundAmount     Decimal? @map("max_refund_amount") @db.Decimal(10, 2)
  description         String?
  active              Boolean  @default(true)
  companyId           String   @map("company_id")
  company             Company  @relation(fields: [companyId], references: [id])
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@unique([companyId, cancellationType])
  @@index([companyId])
  @@index([cancellationType])
  @@map("cancellation_settings")
}

// Lawyer Service Settings model for configurable lawyer fees
model LawyerServiceSetting {
  id              String   @id @default(uuid())
  lawyerFeeCost   Decimal  @map("lawyer_fee_cost") @db.Decimal(10, 2) // Actual cost to office
  lawyerFeeCharge Decimal  @map("lawyer_fee_charge") @db.Decimal(10, 2) // What office charges client
  description     String?
  active          Boolean  @default(true)
  companyId       String   @map("company_id")
  company         Company  @relation(fields: [companyId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([companyId])
  @@index([companyId])
  @@map("lawyer_service_settings")
}